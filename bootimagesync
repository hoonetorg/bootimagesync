#!/bin/bash

#initial vars
CONFIGFILE="/etc/bootimagesync/bootimagesync.conf"

usage(){
  echo
  echo "usage: `basename $0` [-c <config-file>]  [-v]"
  echo "-c <config-file>:    config-file (default: /etc/bootimagesync/bootimagesync.conf)"
  echo "-v:                  be more verbose"
}

get_dst(){
  if [ \
       -z "$REPO_BASEPATH" -o \
       -z "$REPODIRBASE" -o \
       -z "$RELEASEVERFULL" -o \
       -z "$ARCH" \
     ]; then
    logger -s "\$REPO_BASEPATH or \$REPODIRBASE or \$RELEASEVERFULL or \$ARCH is not set in configfiles - exiting"
    return 1
  else
    echo "$REPO_BASEPATH/$REPODIRBASE/$RELEASEVERFULL/$ARCH"
  fi
}

download(){
  CONF=$1
  [ -z "$CONF" ] && return 1

  [ -f "$CONF" ] && . "$CONF" || return 1

  DST="`get_dst`" || return 1

  [ -z "$DST" ] && return 1

  mkdir -p "$DST/"
  cd "$DST" || return 1

  if [ -f "downloaded" ]; then
    logger -s "already downloaded to $DST - exiting"
    return 0
  fi

  EXCLUDEALL=""
  for EXCLUDEITEM in $EXCLUDE $EXCLUDEDIST;do
    EXCLUDEALL="$EXCLUDEALL -X $EXCLUDEITEM"
  done

  if [ -n "$SRC" ]; then
    logger -s "trying to download $SRC"
    curl -o /dev/null -s -f  $SRC || return 1
    logger -s "mirroring $SRC to $DST, excluded: \"$EXCLUDEALL\" with following command:"
    logger -s "lftp -e \"mirror $EXCLUDEALL --delete --only-newer --verbose && exit\" $SRC 2>&1"
    lftp -e "mirror $EXCLUDEALL --delete --only-newer --verbose && exit" $SRC 2>&1
  else
    return 1
  fi

  touch downloaded
}

patch(){
  CONF=$1
  [ -z "$CONF" ] && return 1

  [ -f "$CONF" ] && . "$CONF" || return 1

  [ -n "$CACERTURL" -o -n "$CACERTPATH" ] || return 1

  DST="`get_dst`" || return 1

  [ -d "$DST" ] || return 1

  cd "$DST" || return 1

  if [ -f "patched" ]; then
    logger -s "already patched $DST - exiting"
    return 0
  fi

  [ -d "images/pxeboot" ] && cd images/pxeboot || return 1

  #cleanup
  [ -d  "initrd" ] && /bin/rm -Rf initrd/ 
  [ -f "initrd.imge" ] && /bin/rm initrd.imge
      
  #get cacert
  if [ -n "$CACERTURL" ]; then
    curl -s -k -o ./ca.pem "$CACERTURL" || return 1
  fi
      
  if [ -n "$CACERTPATH" ]; then
    cp "$CACERTPATH" ./ca.pem || return 1
  fi

  [ -f "./ca.pem" ] || return 1      

  #extract
  if [ $OFFSET -gt 0 ]; then
    #find out the offset of image is missing
    #OFFSET="`binwalk initrd.img |grep xz |awk '{print $<correct field>}'`"
    #example offset for Fedora 21 OFFSET=22528
    [ -f "initrd.img" ] && dd if=initrd.img bs=$OFFSET skip=1|xz -d - >initrd.imge || return 1
  else
    [ -f "initrd.img" ] && cat initrd.img|xz -d - > initrd.imge || return 1
  fi

  #rm initrd.img
  [ -f "initrd.img" ] && /bin/rm initrd.img 
      
  #uncpio
  mkdir initrd
  cd initrd
  [ -f "../initrd.imge" ] && cpio --quiet -di < ../initrd.imge || return 1
  [ -f "../initrd.imge" ] && /bin/rm ../initrd.imge
      
  #patch
  [ -f "../ca.pem" ] && cat ../ca.pem >> etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem || return 1
  [ -f "../ca.pem" ] && /bin/rm ../ca.pem
      
  #cpio
  find ./ | cpio --quiet -H newc -o >../initrd.img
      
  #cleanup
  cd ..
  [ -d  "initrd" ] && /bin/rm -Rf initrd/ 
      
  xz -9 -C crc32 initrd.img
  mv initrd.img.xz initrd.img

  cd "$DST" || return 1
  touch patched
}


main(){
  if [ -d "${CONFIGFILE}.d" ]; then

    MYOLDPWD="`pwd`"

    for MYCONF in ${CONFIGFILE}.d/*;do
      #download pxe boot images
      download $MYCONF

      #patch ca cert into initrd.img of os
      patch $MYCONF
    done

    cd $MYOLDPWD
  fi
}

OPTIND=1
while getopts "h?vc:" OPT; do
    case "$OPT" in
    c)    CONFIGFILE=$OPTARG
          ;;
    v)    set -x
          ;;
    h|\?) usage
          exit 0
          ;;
    esac
done
shift $((OPTIND-1))
[ "$1" = "--" ] && shift

#validation
if [ -f "$CONFIGFILE" ]; then
 . "$CONFIGFILE"
else
  echo "configfile '$CONFIGFILE' missing - exiting"
  usage
  exit 1
fi
if [ -z "$PIDDIR" ]; then
  echo "PIDDIR '$PIDDIR' must be defined"
  usage
  exit 1
fi
if [ -z "$LOGDIR" ]; then
  echo "LOGDIR '$LOGDIR' must be defined"
  usage
  exit 1
fi

[ ! -d $PIDDIR/ ] && ( mkdir -p $PIDDIR/ || exit 1 )
PIDFILE="$PIDDIR/`basename $0`.pid"
if [ -e "$PIDFILE" ]; then
  PID="`cat $PIDFILE`"
  if kill -0 $PID >/dev/null 2>&1; then
    echo "FAILURE: `basename $0` already running  - exiting"
    exit 1
  else
    rm $PIDFILE
  fi
fi
echo $$ > $PIDFILE

#validate rest in main(), so that it is logged to the logfile
[ ! -d "$LOGDIR/" ] && ( mkdir -p "$LOGDIR/" || exit 1 )
main 1>> $LOGDIR/`basename $0`.log 2>&1

rm $PIDFILE
