#!/bin/bash

#initial vars
CONFIGFILE="/etc/bootimagesync/bootimagesync.conf"

usage(){
  echo
  echo "usage: `basename $0` [-c <config-file>]  [-v]"
  echo "-c <config-file>:    config-file (default: /etc/bootimagesync/bootimagesync.conf)"
  echo "-v:                  be more verbose"
}

get_dst(){
  if [ \
       -z "$REPO_BASEPATH" -o \
       -z "$REPODIRBASE" -o \
       -z "$RELEASEVERFULL" -o \
       -z "$ARCH" \
     ]; then
    logger -s "\$REPO_BASEPATH or \$REPODIRBASE or \$RELEASEVERFULL or \$ARCH is not set in configfiles - exiting"
    return 1
  else
    echo "$REPO_BASEPATH/$REPODIRBASE/$RELEASEVERFULL/$ARCH"
  fi
}

make_links(){
  CONF=$1
  [ -z "$CONF" ] && return 1

  [ -f "$CONF" ] && . "$CONF" || return 1

  DST="`get_dst`" || return 1

  [ -z "$DST" ] && return 1

  [ -d "$DST/" ] || return 1

  if [ -n "$LINKS" -a -n "$LINKPATHS" ];then
    for LINKPATH in $LINKPATHS; do

      for LINK in $LINKS;do
        [ -L "$LINKPATH/$LINK" ] && ( unlink $LINKPATH/$LINK || return 1 )
        [ ! -e "$LINKPATH/$LINK" ] && ln -fs $DST/$LINK $LINKPATH/$LINK
      done
    done
  fi
}

main(){
  if [ -d "${CONFIGFILE}.d" ]; then
    for MYCONF in ${CONFIGFILE}.d/*;do
      #make links into yum repos
      make_links $MYCONF
    done
  fi
}


OPTIND=1
while getopts "h?vc:" OPT; do
    case "$OPT" in
    c)    CONFIGFILE=$OPTARG
          ;;
    v)    set -x
          ;;
    h|\?) usage
          exit 0
          ;;
    esac
done
shift $((OPTIND-1))
[ "$1" = "--" ] && shift

#validation
if [ -f "$CONFIGFILE" ]; then
 . "$CONFIGFILE"
else
  echo "configfile '$CONFIGFILE' missing - exiting"
  usage
  exit 1
fi
if [ -z "$PIDDIR" ]; then
  echo "PIDDIR '$PIDDIR' must be defined"
  usage
  exit 1
fi
if [ -z "$LOGDIR" ]; then
  echo "LOGDIR '$LOGDIR' must be defined"
  usage
  exit 1
fi

[ ! -d $PIDDIR/ ] && ( mkdir -p $PIDDIR/ || exit 1 )
PIDFILE="$PIDDIR/`basename $0`.pid"
if [ -e "$PIDFILE" ]; then
  PID="`cat $PIDFILE`"
  if kill -0 $PID >/dev/null 2>&1; then
    echo "FAILURE: `basename $0` already running  - exiting"
    exit 1
  else
    rm $PIDFILE
  fi
fi
echo $$ > $PIDFILE

#validate rest in main(), so that it is logged to the logfile
[ ! -d "$LOGDIR/" ] && ( mkdir -p "$LOGDIR/" || exit 1 )
main 1>> $LOGDIR/`basename $0`.log 2>&1

rm $PIDFILE
